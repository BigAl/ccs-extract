name: Docker Build and Test

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'ccs_extract.py'
      - '.github/workflows/docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'requirements.txt'
      - 'ccs_extract.py'
      - '.github/workflows/docker.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ccs-extract:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create test environment
        run: |
          mkdir -p input output
          # Set directory permissions to 777 to allow Docker container to write
          chmod 777 input output
          # Install reportlab for PDF generation
          pip install reportlab
          # Create a simple PDF for testing using Python
          python3 -c "
          from reportlab.pdfgen import canvas
          from reportlab.lib.pagesizes import letter
          c = canvas.Canvas('input/sample.pdf', pagesize=letter)
          c.drawString(100, 750, 'Sample Credit Card Statement')
          c.save()
          "
          # Set PDF file permissions
          chmod 666 input/sample.pdf
          # Copy config file to input directory
          cp transaction_config.json input/

      - name: Run Docker tests
        run: |
          # Test basic container functionality
          docker run --rm -v $(pwd)/input:/app/input:ro -v $(pwd)/output:/app/output:rw ccs-extract:latest /app/input/sample.pdf --output /app/output/sample.csv --config /app/input/transaction_config.json
          
          # Check if output file was created
          if [ ! -f "output/sample.csv" ]; then
            echo "Error: Output file was not created"
            exit 1
          fi
          
          # Check if output file has the correct headers
          if ! grep -q "Transaction Date,Merchant,Category,Transaction Details,Amount" output/sample.csv; then
            echo "Error: Output file does not contain expected headers"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf input output 